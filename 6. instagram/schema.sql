# https://dbdiagram.io/d/Instagram-65cb698bac844320ae0b6df6
CREATE TABLE users (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	username VARCHAR(30) NOT NULL,
	bio TEXT,
	avatar VARCHAR(200),
	phone VARCHAR(25) UNIQUE,
	email VARCHAR(100) UNIQUE,
	password VARCHAR(50),
	status VARCHAR(15)
	CHECK(COALESCE(phone, email) IS NOT NULL) # Whether an email or a phone should be not NULL, Error in case if email and phone are NULL
);

CREATE TABLE posts (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	url VARCHAR(200) NOT NULL,
	caption VARCHAR(240),
	lat REAL CHECK (lat IS NULL OR (lat <= 90 AND lat >= -90)), 
	lng REAL CHECK (lat IS NULL OR (lat <= 180 AND lat >= -180)),
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE comments (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	contents VARCHAR(240) NOT NULL,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE
);

CREATE TABLE likes (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
	comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE
	
	CHECK(
		(COALESCE((post_id)::BOOLEAN::INTEGER, 0)) +
		(COALESCE((comment_id)::BOOLEAN::INTEGER, 0)) 
		= 1
	)
	UNIQUE(user_id, post_id, comment_id)
);

CREATE TABLE photo_tags(
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	x INTEGER,
	y INTEGER,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	UNIQUE(user_id, post_id)
);

CREATE TABLE caption_tags(
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	UNIQUE(user_id, post_id)
);

CREATE TABLE hashtags (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	title VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE hashtags_posts (
	id SERIAL PRIMARY KEY,
	
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE

  UNIQUE(post_id, hashtag_id)
);

CREATE TABLE followers (
	id SERIAL PRIMARY KEY,
	leader_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	follower_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	
	UNIQUE(leader_id, follower_id),
	CHECK(leader_id <> follower_id)
);

--- INDEXES ----

CREATE INDEX users_username_idx ON users (username);
DROP INDEX users_username_idx;

-- Benchmarking --

EXPLAIN ANALYZE SELECT * FROM users WHERE username = 'Emil30';